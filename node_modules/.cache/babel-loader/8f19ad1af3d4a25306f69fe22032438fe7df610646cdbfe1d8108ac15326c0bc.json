{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\Adv Project\\\\ckv-pays\\\\src\\\\components\\\\RedirectPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RedirectPage() {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Attempt to retrieve data from local storage\n        const storedData = localStorage.getItem('urlData');\n\n        // If data exists in local storage, parse and set it\n        if (storedData) {\n          const jsonData = JSON.parse(storedData);\n          setData(jsonData);\n        } else {\n          // If no data in local storage, fetch it from the external source\n          const response = await fetch(\"./url.json\");\n          if (!response.ok) {\n            throw new Error(`Network response was not ok: ${response.status}`);\n          }\n          const contentType = response.headers.get('content-type');\n          if (contentType && contentType.includes('application/json')) {\n            const jsonData = await response.json();\n\n            // Store the fetched data in local storage\n            localStorage.setItem('urlData', JSON.stringify(jsonData));\n\n            // Set the data state\n            setData(jsonData);\n          } else {\n            // Log the response content for debugging\n            const text = await response.text();\n            console.error('Response is not JSON. Content:', text);\n            throw new Error('Response is not JSON');\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        // Handle the error, e.g., show an error message to the user\n      }\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.entries(data).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [key, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), \" \", value]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(RedirectPage, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = RedirectPage;\nexport default RedirectPage;\nvar _c;\n$RefreshReg$(_c, \"RedirectPage\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","RedirectPage","_s","data","setData","fetchData","storedData","localStorage","getItem","jsonData","JSON","parse","response","fetch","ok","Error","status","contentType","headers","get","includes","json","setItem","stringify","text","console","error","message","children","Object","entries","map","key","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/Adv Project/ckv-pays/src/components/RedirectPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction RedirectPage() {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Attempt to retrieve data from local storage\r\n        const storedData = localStorage.getItem('urlData');\r\n\r\n        // If data exists in local storage, parse and set it\r\n        if (storedData) {\r\n          const jsonData = JSON.parse(storedData);\r\n          setData(jsonData);\r\n        } else {\r\n          // If no data in local storage, fetch it from the external source\r\n          const response = await fetch(\"./url.json\");\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`Network response was not ok: ${response.status}`);\r\n          }\r\n\r\n          const contentType = response.headers.get('content-type');\r\n\r\n          if (contentType && contentType.includes('application/json')) {\r\n            const jsonData = await response.json();\r\n\r\n            // Store the fetched data in local storage\r\n            localStorage.setItem('urlData', JSON.stringify(jsonData));\r\n\r\n            // Set the data state\r\n            setData(jsonData);\r\n          } else {\r\n            // Log the response content for debugging\r\n            const text = await response.text();\r\n            console.error('Response is not JSON. Content:', text);\r\n            throw new Error('Response is not JSON');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error.message);\r\n        // Handle the error, e.g., show an error message to the user\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Render components based on the fetched data */}\r\n      {data && (\r\n        <div>\r\n          {Object.entries(data).map(([key, value]) => (\r\n            <div key={key}>\r\n              <strong>{key}:</strong> {value}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RedirectPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;;QAElD;QACA,IAAIF,UAAU,EAAE;UACd,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;UACvCF,OAAO,CAACK,QAAQ,CAAC;QACnB,CAAC,MAAM;UACL;UACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;UAE1C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAE,gCAA+BH,QAAQ,CAACI,MAAO,EAAC,CAAC;UACpE;UAEA,MAAMC,WAAW,GAAGL,QAAQ,CAACM,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAExD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;YAC3D,MAAMX,QAAQ,GAAG,MAAMG,QAAQ,CAACS,IAAI,CAAC,CAAC;;YAEtC;YACAd,YAAY,CAACe,OAAO,CAAC,SAAS,EAAEZ,IAAI,CAACa,SAAS,CAACd,QAAQ,CAAC,CAAC;;YAEzD;YACAL,OAAO,CAACK,QAAQ,CAAC;UACnB,CAAC,MAAM;YACL;YACA,MAAMe,IAAI,GAAG,MAAMZ,QAAQ,CAACY,IAAI,CAAC,CAAC;YAClCC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,IAAI,CAAC;YACrD,MAAM,IAAIT,KAAK,CAAC,sBAAsB,CAAC;UACzC;QACF;MACF,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACC,OAAO,CAAC;QACpD;MACF;IACF,CAAC;;IAEDtB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAA4B,QAAA,EAEGzB,IAAI,iBACHH,OAAA;MAAA4B,QAAA,EACGC,MAAM,CAACC,OAAO,CAAC3B,IAAI,CAAC,CAAC4B,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,kBACrCjC,OAAA;QAAA4B,QAAA,gBACE5B,OAAA;UAAA4B,QAAA,GAASI,GAAG,EAAC,GAAC;QAAA;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACJ,KAAK;MAAA,GADtBD,GAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAER,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnC,EAAA,CA7DQD,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AA+DrB,eAAeA,YAAY;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}